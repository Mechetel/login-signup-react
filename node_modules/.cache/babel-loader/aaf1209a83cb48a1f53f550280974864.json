{"ast":null,"code":"'use strict';\n\nfunction assign() {\n  var objects = toArray(arguments);\n  var target = objects[0];\n  var sources = objects.slice(1);\n  sources.filter(function (source) {\n    return !!source;\n  }).forEach(function (source) {\n    Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\n\nexports.assign = assign;\n\nfunction intersection(left, right) {\n  left = toArray(left);\n  right = toArray(right);\n  var leftSet = {};\n  left.forEach(function (k) {\n    leftSet[k] = true;\n  });\n  var rightSet = {};\n  right.forEach(function (k) {\n    rightSet[k] = true;\n  });\n  return Object.keys(leftSet).filter(function (k) {\n    return Object.prototype.hasOwnProperty.call(rightSet, k);\n  });\n}\n\nexports.intersection = intersection;\n\nfunction isInteger(n) {\n  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n;\n}\n\nexports.isInteger = isInteger;\n\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\nexports.isString = isString;\n\nfunction range(n) {\n  return Array.apply(null, Array(n)).map(function (x, i) {\n    return i;\n  });\n}\n\nexports.range = range;\n\nfunction repeat(val, n) {\n  return range(n).map(function () {\n    return val;\n  });\n}\n\nexports.repeat = repeat;\n\nfunction toArray(x) {\n  return Array.prototype.slice.call(x);\n}\n\nexports.toArray = toArray;","map":null,"metadata":{},"sourceType":"script"}