{"ast":null,"code":"'use strict';\n\nvar secureRandom = require('secure-random');\n\nvar util = require('./util');\n\nfunction Random(randomSource) {\n  if (typeof randomSource !== 'function') {\n    throw new Error('Must pass a randomSource function');\n  }\n\n  this._randomSource = randomSource;\n}\n\nRandom.prototype.choose = function (choices) {\n  if (!choices || !choices.length) {\n    throw new Error('Must pass 1 or more choices');\n  }\n\n  return choices[this._getInt(choices.length)];\n};\n\nRandom.prototype.getInt = function (upperBoundExclusive) {\n  if (upperBoundExclusive === undefined) {\n    throw new Error('Must pass an upper bound');\n  }\n\n  if (!util.isInteger(upperBoundExclusive)) {\n    throw new Error('Upper bound must be a number');\n  }\n\n  if (upperBoundExclusive < 1) {\n    throw new Error('Upper bound must be > 0');\n  }\n\n  return this._getInt(upperBoundExclusive);\n};\n\nRandom.prototype._getInt = function (upperBoundExclusive) {\n  if (upperBoundExclusive === 1) {\n    return 0; // short-circuit to avoid calling _randomSource with `0`\n  }\n\n  var numBytes = Math.ceil(Math.log(upperBoundExclusive) / Math.log(256));\n  var startOfBias = Math.pow(2, 8 * numBytes) - Math.pow(2, 8 * numBytes) % upperBoundExclusive;\n  var randomNumber;\n\n  do {\n    randomNumber = byteArrayToInt(this._randomSource(numBytes));\n  } while (randomNumber >= startOfBias);\n\n  return randomNumber % upperBoundExclusive;\n};\n\nRandom.prototype.shuffle = function (items) {\n  items = Array.prototype.slice.call(items || []);\n  var result = [];\n\n  while (items.length) {\n    result.push(items.splice(this._getInt(items.length), 1)[0]);\n  }\n\n  return result;\n};\n\nexports.Random = Random;\nexports.default = new Random(secureRandom);\n\nfunction byteArrayToInt(bytes) {\n  bytes = bytes || [];\n  var result = 0;\n  var power = 1;\n\n  for (var i = bytes.length - 1; i >= 0; i--) {\n    result += bytes[i] * power;\n    power *= 256;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}