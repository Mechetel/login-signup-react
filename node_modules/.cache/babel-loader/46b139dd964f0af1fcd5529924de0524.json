{"ast":null,"code":"import _objectSpread from \"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isPlainObject from 'is-plain-obj';\nexport default function sortKeys(object) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isPlainObject(object) && !Array.isArray(object)) {\n    throw new TypeError('Expected a plain object or array');\n  }\n\n  var deep = options.deep,\n      compare = options.compare;\n  var seenInput = [];\n  var seenOutput = [];\n\n  var deepSortArray = function deepSortArray(array) {\n    var seenIndex = seenInput.indexOf(array);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    var result = [];\n    seenInput.push(array);\n    seenOutput.push(result);\n    result.push.apply(result, _toConsumableArray(array.map(function (item) {\n      if (Array.isArray(item)) {\n        return deepSortArray(item);\n      }\n\n      if (isPlainObject(item)) {\n        return _sortKeys(item);\n      }\n\n      return item;\n    })));\n    return result;\n  };\n\n  var _sortKeys = function _sortKeys(object) {\n    var seenIndex = seenInput.indexOf(object);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    var result = {};\n    var keys = Object.keys(object).sort(compare);\n    seenInput.push(object);\n    seenOutput.push(result);\n\n    var _iterator = _createForOfIteratorHelper(keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var value = object[key];\n        var newValue = void 0;\n\n        if (deep && Array.isArray(value)) {\n          newValue = deepSortArray(value);\n        } else {\n          newValue = deep && isPlainObject(value) ? _sortKeys(value) : value;\n        }\n\n        Object.defineProperty(result, key, _objectSpread({}, Object.getOwnPropertyDescriptor(object, key), {\n          value: newValue\n        }));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  };\n\n  if (Array.isArray(object)) {\n    return deep ? deepSortArray(object) : object.slice();\n  }\n\n  return _sortKeys(object);\n}","map":null,"metadata":{},"sourceType":"module"}