{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _fs;\n\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\n\nvar universalify = require('universalify');\n\nvar _require = require('./utils'),\n    stringify = _require.stringify,\n    stripBom = _require.stripBom;\n\nfunction _readFile(_x) {\n  return _readFile2.apply(this, arguments);\n}\n\nfunction _readFile2() {\n  _readFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n    var options,\n        fs,\n        shouldThrow,\n        data,\n        obj,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n            if (typeof options === 'string') {\n              options = {\n                encoding: options\n              };\n            }\n\n            fs = options.fs || _fs;\n            shouldThrow = 'throws' in options ? options.throws : true;\n            _context.next = 6;\n            return universalify.fromCallback(fs.readFile)(file, options);\n\n          case 6:\n            data = _context.sent;\n            data = stripBom(data);\n            _context.prev = 8;\n            obj = JSON.parse(data, options ? options.reviver : null);\n            _context.next = 20;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](8);\n\n            if (!shouldThrow) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.t0.message = \"\".concat(file, \": \").concat(_context.t0.message);\n            throw _context.t0;\n\n          case 19:\n            return _context.abrupt(\"return\", null);\n\n          case 20:\n            return _context.abrupt(\"return\", obj);\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 12]]);\n  }));\n  return _readFile2.apply(this, arguments);\n}\n\nvar readFile = universalify.fromPromise(_readFile);\n\nfunction readFileSync(file) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  var fs = options.fs || _fs;\n  var shouldThrow = 'throws' in options ? options.throws : true;\n\n  try {\n    var content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = \"\".concat(file, \": \").concat(err.message);\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\n\nfunction _writeFile(_x2, _x3) {\n  return _writeFile2.apply(this, arguments);\n}\n\nfunction _writeFile2() {\n  _writeFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, obj) {\n    var options,\n        fs,\n        str,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            fs = options.fs || _fs;\n            str = stringify(obj, options);\n            _context2.next = 5;\n            return universalify.fromCallback(fs.writeFile)(file, str, options);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _writeFile2.apply(this, arguments);\n}\n\nvar writeFile = universalify.fromPromise(_writeFile);\n\nfunction writeFileSync(file, obj) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fs = options.fs || _fs;\n  var str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case\n\n  return fs.writeFileSync(file, str, options);\n}\n\nvar jsonfile = {\n  readFile: readFile,\n  readFileSync: readFileSync,\n  writeFile: writeFile,\n  writeFileSync: writeFileSync\n};\nmodule.exports = jsonfile;","map":null,"metadata":{},"sourceType":"script"}