{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/dmitryhoma/Projects/login-signup-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport path from 'node:path';\nimport fs, { promises as fsPromises } from 'node:fs';\nimport writeFileAtomic from 'write-file-atomic';\nimport sortKeys from 'sort-keys';\nimport detectIndent from 'detect-indent';\nimport isPlainObj from 'is-plain-obj';\n\nvar init = function init(function_, filePath, data, options) {\n  if (!filePath) {\n    throw new TypeError('Expected a filepath');\n  }\n\n  if (data === undefined) {\n    throw new TypeError('Expected data to stringify');\n  }\n\n  options = _objectSpread({\n    indent: '\\t',\n    sortKeys: false\n  }, options);\n\n  if (options.sortKeys && isPlainObj(data)) {\n    data = sortKeys(data, {\n      deep: true,\n      compare: typeof options.sortKeys === 'function' ? options.sortKeys : undefined\n    });\n  }\n\n  return function_(filePath, data, options);\n};\n\nvar main = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePath, data, options) {\n    var indent, trailingNewline, file, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            indent = options.indent;\n            trailingNewline = '\\n';\n            _context.prev = 2;\n            _context.next = 5;\n            return fsPromises.readFile(filePath, 'utf8');\n\n          case 5:\n            file = _context.sent;\n\n            if (!file.endsWith('\\n')) {\n              trailingNewline = '';\n            }\n\n            if (options.detectIndent) {\n              indent = detectIndent(file).indent;\n            }\n\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (!(_context.t0.code !== 'ENOENT')) {\n              _context.next = 14;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 14:\n            json = JSON.stringify(data, options.replacer, indent);\n            return _context.abrupt(\"return\", writeFileAtomic(filePath, \"\".concat(json).concat(trailingNewline), {\n              mode: options.mode,\n              chown: false\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 10]]);\n  }));\n\n  return function main(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar mainSync = function mainSync(filePath, data, options) {\n  var indent = options.indent;\n  var trailingNewline = '\\n';\n\n  try {\n    var file = fs.readFileSync(filePath, 'utf8');\n\n    if (!file.endsWith('\\n')) {\n      trailingNewline = '';\n    }\n\n    if (options.detectIndent) {\n      indent = detectIndent(file).indent;\n    }\n  } catch (error) {\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n\n  var json = JSON.stringify(data, options.replacer, indent);\n  return writeFileAtomic.sync(filePath, \"\".concat(json).concat(trailingNewline), {\n    mode: options.mode,\n    chown: false\n  });\n};\n\nexport function writeJsonFile(_x4, _x5, _x6) {\n  return _writeJsonFile.apply(this, arguments);\n}\n\nfunction _writeJsonFile() {\n  _writeJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filePath, data, options) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fsPromises.mkdir(path.dirname(filePath), {\n              recursive: true\n            });\n\n          case 2:\n            _context2.next = 4;\n            return init(main, filePath, data, options);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _writeJsonFile.apply(this, arguments);\n}\n\nexport function writeJsonFileSync(filePath, data, options) {\n  fs.mkdirSync(path.dirname(filePath), {\n    recursive: true\n  });\n  init(mainSync, filePath, data, options);\n}","map":null,"metadata":{},"sourceType":"module"}